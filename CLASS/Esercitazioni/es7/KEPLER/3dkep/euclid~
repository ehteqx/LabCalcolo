! EUCLIDIV
! Euclidean algorithm for finding the GCD of two integer numbers
! (C) Emanuele Ballarin - 06/05/2015

! ########## MODULES ##########
MODULE euclidiv
	implicit none
	integer,parameter :: ik=selected_int_kind(12)
	
	CONTAINS

! Hypothesis Checker	
	function hypothesis(x,y) result(valid)
	
		implicit none
		integer (kind = ik), intent(in) :: x,y
		logical :: valid
		
		valid = .FALSE.
		
		if ((x .LE. y) .AND. (.NOT.((x == 0) .AND. (y == 0)))) then
			valid = .TRUE.
		end if
	end function hypothesis	
	
	
! Euclidean Algorithm
	recursive function euclidean(sup,inf) result(gcd)
	
		implicit none
		integer (kind = ik), intent (in) = sup, inf
		integer (kind = rk) :: gcd
	
		if (inf = 0) then
			gcd = 0
		else
			gcd = euclidean(mod(sup,inf))
		end if
	end function euclidean

end module euclidiv

! ########## PROGRAM ##########
PROGRAM main
	use hypothesis
	use euclidean
	
	implicit none
	integer (kind = ik) :: first,second, gcdr
	
	print*, 'INSERIRE IL PRIMO NUMERO (maggiore): '
	read*, first
	
	print*, ' '
	print*, 'INSERIRE IL SECONDO NUMERO (minore): '
	read*, second
	print*, ' '	

	gcdr = gcd(first,second)
	print*, gcdr

end program main
